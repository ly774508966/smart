package com.rabbit.smart.dao.db2.entity;

import java.util.ArrayList;
import java.util.List;

public class XhxtCodeExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table UTCDBA.XHXT_CODE
     *
     * @mbggenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table UTCDBA.XHXT_CODE
     *
     * @mbggenerated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table UTCDBA.XHXT_CODE
     *
     * @mbggenerated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table UTCDBA.XHXT_CODE
     *
     * @mbggenerated
     */
    public XhxtCodeExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table UTCDBA.XHXT_CODE
     *
     * @mbggenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table UTCDBA.XHXT_CODE
     *
     * @mbggenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table UTCDBA.XHXT_CODE
     *
     * @mbggenerated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table UTCDBA.XHXT_CODE
     *
     * @mbggenerated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table UTCDBA.XHXT_CODE
     *
     * @mbggenerated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table UTCDBA.XHXT_CODE
     *
     * @mbggenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table UTCDBA.XHXT_CODE
     *
     * @mbggenerated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table UTCDBA.XHXT_CODE
     *
     * @mbggenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table UTCDBA.XHXT_CODE
     *
     * @mbggenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table UTCDBA.XHXT_CODE
     *
     * @mbggenerated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table UTCDBA.XHXT_CODE
     *
     * @mbggenerated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andNcodetypeidIsNull() {
            addCriterion("NCODETYPEID is null");
            return (Criteria) this;
        }

        public Criteria andNcodetypeidIsNotNull() {
            addCriterion("NCODETYPEID is not null");
            return (Criteria) this;
        }

        public Criteria andNcodetypeidEqualTo(Short value) {
            addCriterion("NCODETYPEID =", value, "ncodetypeid");
            return (Criteria) this;
        }

        public Criteria andNcodetypeidNotEqualTo(Short value) {
            addCriterion("NCODETYPEID <>", value, "ncodetypeid");
            return (Criteria) this;
        }

        public Criteria andNcodetypeidGreaterThan(Short value) {
            addCriterion("NCODETYPEID >", value, "ncodetypeid");
            return (Criteria) this;
        }

        public Criteria andNcodetypeidGreaterThanOrEqualTo(Short value) {
            addCriterion("NCODETYPEID >=", value, "ncodetypeid");
            return (Criteria) this;
        }

        public Criteria andNcodetypeidLessThan(Short value) {
            addCriterion("NCODETYPEID <", value, "ncodetypeid");
            return (Criteria) this;
        }

        public Criteria andNcodetypeidLessThanOrEqualTo(Short value) {
            addCriterion("NCODETYPEID <=", value, "ncodetypeid");
            return (Criteria) this;
        }

        public Criteria andNcodetypeidIn(List<Short> values) {
            addCriterion("NCODETYPEID in", values, "ncodetypeid");
            return (Criteria) this;
        }

        public Criteria andNcodetypeidNotIn(List<Short> values) {
            addCriterion("NCODETYPEID not in", values, "ncodetypeid");
            return (Criteria) this;
        }

        public Criteria andNcodetypeidBetween(Short value1, Short value2) {
            addCriterion("NCODETYPEID between", value1, value2, "ncodetypeid");
            return (Criteria) this;
        }

        public Criteria andNcodetypeidNotBetween(Short value1, Short value2) {
            addCriterion("NCODETYPEID not between", value1, value2, "ncodetypeid");
            return (Criteria) this;
        }

        public Criteria andCcodevalueIsNull() {
            addCriterion("CCODEVALUE is null");
            return (Criteria) this;
        }

        public Criteria andCcodevalueIsNotNull() {
            addCriterion("CCODEVALUE is not null");
            return (Criteria) this;
        }

        public Criteria andCcodevalueEqualTo(String value) {
            addCriterion("CCODEVALUE =", value, "ccodevalue");
            return (Criteria) this;
        }

        public Criteria andCcodevalueNotEqualTo(String value) {
            addCriterion("CCODEVALUE <>", value, "ccodevalue");
            return (Criteria) this;
        }

        public Criteria andCcodevalueGreaterThan(String value) {
            addCriterion("CCODEVALUE >", value, "ccodevalue");
            return (Criteria) this;
        }

        public Criteria andCcodevalueGreaterThanOrEqualTo(String value) {
            addCriterion("CCODEVALUE >=", value, "ccodevalue");
            return (Criteria) this;
        }

        public Criteria andCcodevalueLessThan(String value) {
            addCriterion("CCODEVALUE <", value, "ccodevalue");
            return (Criteria) this;
        }

        public Criteria andCcodevalueLessThanOrEqualTo(String value) {
            addCriterion("CCODEVALUE <=", value, "ccodevalue");
            return (Criteria) this;
        }

        public Criteria andCcodevalueLike(String value) {
            addCriterion("CCODEVALUE like", value, "ccodevalue");
            return (Criteria) this;
        }

        public Criteria andCcodevalueNotLike(String value) {
            addCriterion("CCODEVALUE not like", value, "ccodevalue");
            return (Criteria) this;
        }

        public Criteria andCcodevalueIn(List<String> values) {
            addCriterion("CCODEVALUE in", values, "ccodevalue");
            return (Criteria) this;
        }

        public Criteria andCcodevalueNotIn(List<String> values) {
            addCriterion("CCODEVALUE not in", values, "ccodevalue");
            return (Criteria) this;
        }

        public Criteria andCcodevalueBetween(String value1, String value2) {
            addCriterion("CCODEVALUE between", value1, value2, "ccodevalue");
            return (Criteria) this;
        }

        public Criteria andCcodevalueNotBetween(String value1, String value2) {
            addCriterion("CCODEVALUE not between", value1, value2, "ccodevalue");
            return (Criteria) this;
        }

        public Criteria andCcodevaluenoteIsNull() {
            addCriterion("CCODEVALUENOTE is null");
            return (Criteria) this;
        }

        public Criteria andCcodevaluenoteIsNotNull() {
            addCriterion("CCODEVALUENOTE is not null");
            return (Criteria) this;
        }

        public Criteria andCcodevaluenoteEqualTo(String value) {
            addCriterion("CCODEVALUENOTE =", value, "ccodevaluenote");
            return (Criteria) this;
        }

        public Criteria andCcodevaluenoteNotEqualTo(String value) {
            addCriterion("CCODEVALUENOTE <>", value, "ccodevaluenote");
            return (Criteria) this;
        }

        public Criteria andCcodevaluenoteGreaterThan(String value) {
            addCriterion("CCODEVALUENOTE >", value, "ccodevaluenote");
            return (Criteria) this;
        }

        public Criteria andCcodevaluenoteGreaterThanOrEqualTo(String value) {
            addCriterion("CCODEVALUENOTE >=", value, "ccodevaluenote");
            return (Criteria) this;
        }

        public Criteria andCcodevaluenoteLessThan(String value) {
            addCriterion("CCODEVALUENOTE <", value, "ccodevaluenote");
            return (Criteria) this;
        }

        public Criteria andCcodevaluenoteLessThanOrEqualTo(String value) {
            addCriterion("CCODEVALUENOTE <=", value, "ccodevaluenote");
            return (Criteria) this;
        }

        public Criteria andCcodevaluenoteLike(String value) {
            addCriterion("CCODEVALUENOTE like", value, "ccodevaluenote");
            return (Criteria) this;
        }

        public Criteria andCcodevaluenoteNotLike(String value) {
            addCriterion("CCODEVALUENOTE not like", value, "ccodevaluenote");
            return (Criteria) this;
        }

        public Criteria andCcodevaluenoteIn(List<String> values) {
            addCriterion("CCODEVALUENOTE in", values, "ccodevaluenote");
            return (Criteria) this;
        }

        public Criteria andCcodevaluenoteNotIn(List<String> values) {
            addCriterion("CCODEVALUENOTE not in", values, "ccodevaluenote");
            return (Criteria) this;
        }

        public Criteria andCcodevaluenoteBetween(String value1, String value2) {
            addCriterion("CCODEVALUENOTE between", value1, value2, "ccodevaluenote");
            return (Criteria) this;
        }

        public Criteria andCcodevaluenoteNotBetween(String value1, String value2) {
            addCriterion("CCODEVALUENOTE not between", value1, value2, "ccodevaluenote");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table UTCDBA.XHXT_CODE
     *
     * @mbggenerated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table UTCDBA.XHXT_CODE
     *
     * @mbggenerated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}